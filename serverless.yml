# serverless.yml

service: rave-geo-api

provider:
  name: aws
  logs:
    restApi: true
    role: arn:aws:iam::621709793940:role/rave-api-gteway-role
  apiGateway:
    shouldStartNameWithService: true
    binaryMediaTypes:
      - 'multipart/form-data'
    apiKeys:
      - basic:
          - basicPlanKey
    usagePlan:
      - basic:
          quota:
            limit: 500
            period: MONTH
          throttle:
            rateLimit: 5
            burstLimit: 20
  runtime: python3.9
  stage: ${opt:stage, 'dev'}
  region: us-east-1

plugins:
  - serverless-wsgi
  - serverless-api-gateway-throttling
  - serverless-python-requirements
  - serverless-add-api-key

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
         gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
         gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    RaveGeoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: raveGeo
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
          - AttributeName: status_date
            AttributeType: N
          - AttributeName: geohash_6
            AttributeType: S
          - AttributeName: geohash_7
            AttributeType: S
          - AttributeName: geohash_8
            AttributeType: S
          - AttributeName: status
            AttributeType: S
          - AttributeName: alt_key
            AttributeType: S
          - AttributeName: addr_key
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: alt-key
            KeySchema:
              - AttributeName: alt_key
                KeyType: HASH
              - AttributeName: status_date
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: status-addr-key
            KeySchema:
              - AttributeName: status
                KeyType: HASH
              - AttributeName: addr_key
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: geohash-6
            KeySchema:
              - AttributeName: geohash_6
                KeyType: HASH
              - AttributeName: geohash_7
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: geohash-7
            KeySchema:
              - AttributeName: geohash_7
                KeyType: HASH
              - AttributeName: geohash_8
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: geohash-8
            KeySchema:
              - AttributeName: geohash_8
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: status-age
            KeySchema:
              - AttributeName: status
                KeyType: HASH
              - AttributeName: status_date
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

package:
  patterns:
    - '!node_modules/**'
    - '!venv/**'

custom:
  env:
    dev:
      roleEnv: 'dev'
      memorySize: 128
      lambda_role: arn:aws:iam::621709793940:role/rave-api-role
      environment:
        LOG_LEVEL: INFO
  wsgi:
    app: app.APP

  pythonRequirements:
    dockerizePip: non-linux
    useDownloadCache: false
    useStaticCache: false
    slim: true

  apiGatewayThrottling:
      maxRequestsPerSecond: 10000
      maxConcurrentRequests: 5000


functions:
  rave-geo-api:
    name: rave-geo-api-${self:provider.stage}
    handler: wsgi_handler.handler
    memorySize: ${self:custom.env.${self:provider.stage}.memorySize}
    role: ${self:custom.env.${self:provider.stage}.lambda_role}
    environment:
        ENVIRONMENT: ${self:custom.env.${self:provider.stage}.roleEnv}
        LOG_LEVEL: ${self:custom.env.${self:provider.stage}.environment.LOG_LEVEL}
    events:
      - http:
          path: /
          method: ANY
          cors: true
      - http:
          path: "{proxy+}"
          method: ANY
          cors: true
      - http:
          path: '/api/'
          method: ANY
          cors: true
      - http:
          path: '/geolocation/{proxy+}'
          method: ANY
          cors: true
          private: true
      - http:
          path: '/properties/'
          method: ANY
          cors: true
          private: true